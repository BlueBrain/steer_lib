This software is an implementation of the steering API for the
RealityGrid project, produced by the Research Support Services Group,
Manchester Computing, University of Manchester.  It uses libxml2, the
XML parser created by the Gnome Project, a Base64 codec by Bob
Withers, and gSoap, an implementation of the Simple Object Access
Protocol from Florida State University.

----------------------------------------------------------------------------

How to install:

The XML parser.

The steering library uses libxml2, the XML C library for Gnome.  This
is available from http://xmlsoft.org/downloads.html and should be
installed (including the header files) on your machine before
attempting to install the steering library itself.  Note that the library
is often included with standard Linux distributions (check /usr/lib for
libxml2.so).

(Note, you'll need to set the CFLAGS environment variable to "-mabi=64" to
get a 64-bit version of libxml2 on an SGI.  Configure should also be run 
with the following flags:

--with-python=no --with-threads=no --with-xpath=no --with-xptr=no 
--enable-shared=no flag

If you don't have the access rights to install the library in a system-default
location and don't want to have to set LD_LIBRARY64_PATH/LD_LIBRARYN32_PATH
then you can also specify that you only want a static library by giving the
--enable-shared=no flag.)

----------------------------------------------------------------------------

The Steering Library.

The directory containing this README file should also contain a file called
reg_steer_configure.(c)sh.  This sets some environment variables
to configure the steering system:

REG_STEER_HOME: should be set to the path of the directory that contains
	        this file.

REG_STEER_DIRECTORY: set this to point to an existing directory that will
	             be used as a communication channel between the app.
	  	     and the steerer (i.e. all messages are written and
	  	     read from this directory when using file-based 
                     steering).  This directory is also used to store 
                     logging information.

REG_XML_LIBDIR: The root location of the xml library file (libxml2.a) to link
                against.  NOTE that the actual location is generated by 
	        concatenating either 32 or 64 to the supplied string (depending
                on the type of binary being generated). So, if I had a 64-bit
	        version of the library in directory "/home/me/xml_lib64" then
                I would set REG_XML_LIBDIR to "/home/me/xml_lib".

REG_XML_INCDIR: The path of the libxml 'include' directory.
                (e.g. /usr/freeware/include/libxml2.)

Executing 'source reg_steer_configure.csh' (or equivalent, depending
on which shell you use) will then set these variables.  Since this
needs to be done everytime you log in, it may be wise to add this
command to your .cshrc/.bashrc or equivalent.

All platform-dependent build configuration is done in the file
Makefile.include to be found in this directory.

You should select 64- or 32-bit compilation (if appropriate for your
platform). (Ensure that you have a compatible libxml2 library file.)

Set architecture type (necessary for generating F90 bindings).  The m4 
scripts used to generate the F90 bindings are in src/conf/<ARCH>.m4.
Versions exist for most popular architectures (Linux PC, SGI, SGI 64-bit,
IBM, Alpha etc.).  If you are unsure, check whether the <ARCH>.m4
file contains "INT_KIND_1_CAST"; it it doesn't then you will need to
make the necessary additions.  This involves finding out what C types
the F90 types (int and real) of KIND(1.0) and KIND(1.0D0) correspond
to.  There is some simple code in src/utils to aid with this task.

The m4 scripts ultimately determine the names of the routines that an
F90 compiler will be searching for.  Most of the scripts assume that
this will be the routine name with an underscore character appended.
If your F90 compiler is expecting something else you will need to edit
the sixth line of the appropriate m4 script to change this.

Specify compilers and compiler flags...

Ensure that STEER_LIBS and STEER_INCLUDES point to the correct directories
for finding the steering and libxml2 libraries and associated headers.

Choose whether or not to use sockets for library-controlled sample
emission/consumption. (Uses file-based IO if not.)

Choose whether or not to use SOAP (and the Web Services framework) for
steering.  (Uses file-based steering if not.)

Choose whether or not you want the library to supply debugging output.

Type 'make' in the current directory...

Type 'make install' to install the example binaries in the directory
specified in Makefile.include.

Included in the distribution are 'mini_steerer', 'simple', 'mini_app',
'mini_app2' and 'mini_app_para' (an MPI version) which are _very_
simple applications designed to show how one might make an application
steerable and how one might write a steerer with which to control it.
'mini_steerer' in particular is really just to give an idea - its
functionality is truly primitive and often hard-wired. 'mini_app2' is
similar to 'mini_app' but implemented in F90 instead of C. 'mini_app_para'
is a parallel (F90 and MPI) example.

For a full description of the environment variables used by the steering
library see the docs/Environment_variables.txt file.  These can be crucial
when setting up socket connections on firewalled machines or on machines
which do not have an IP address which it is possible to do a reverse 
lookup of.

----------------------------------------------------------------------------

Other software and documentation

All documentation included with the library is also available from
http://www.sve.man.ac.uk/Research/AtoZ/RealityGrid.  This web site
includes a step-by-step guide to getting started with the examples.

The docs directory contains information on the environment variables
used by the steering library (docs/Environment_variables.txt) and its
dependencies on other software (docs/Dependencies.txt).  The 
library code has been annotated with comments for use with
doxygen.  The resulting html documentation is available at
http://kato.mvc.mcc.ac.uk/reg_steer_lib/docs/html/index.html

You can generate this locally if you have doxygen and the graphviz 
package installed on your system:
         cd <blah>/reg_steer_lib
         make doc
This will produce both html and latex documentation in the docs
directory.  Point a web browser at
<blah>/reg_steer_lib/docs/html/index.html to see the html
documentation.  To make up the latex-based documentation:
         cd <blah>/reg_steer_lib/docs/latex
         make
         <pdf viewer> refman.pdf

Finally, there is some documentation on the protocols used by the
steering library, both for steering itself and for emitting data sets
(docs/ReG_steering_walkthrough_file.doc,
docs/ReG_steering_walkthrough_socket.doc and
ReG_emitdata_walkthrough.doc, respectively).

The xml schema used for all steering messages is in
xml_schema/reg_steer_comm.xsd.

A Qt-based steering client written in C++ and built with the RealityGrid
steering library is also available for Linux and Windows from the same 
site as the steering library:
          http://www.sve.man.ac.uk/Research/AtoZ/RealityGrid

The steering library is able to make use of a Web-Services framework
for remote steering and checkpoint control (this is determined at
compile time by the REG_SOAP_STEERING_FLAG in Makefile.include).  To
use this you will need the WSRF-Lite package 
(http://www.sve.man.ac.uk/Research/AtoZ/ILCT) and the Steering Web Service
code, available from http://www.sve.man.ac.uk/Research/AtoZ/RealityGrid. 
The use of this framework is described in docs/ReG_Steering_Web_Service.tex.

(Versions of the library prior to 2.0 used the OGSI-Lite package
[http://www.sve.man.ac.uk/Research/AtoZ/ILCT].  The use of this
framework is described in docs/ReG_Steering_Grid_Service.doc.)

gSoap

The library distribution includes gSoap, version 2.7.6e.  If for any reason
you wish to change the version of gSOAP used then the relevant files are:

src/stdsoap2.c
include/stdsoap2.h

However, PLEASE NOTE that the version of gSOAP used by the library
includes an addition to allow the calling code to control which port the
http connection uses on the local machine.  The latter is necessary to
make use of the GLOBUS_TCP_PORT_RANGE holes in firewalls that restrict
outgoing as well as incoming connections.  Search for ARPDBG in the
source and header files.

The following files are generated (using gSoap) tools from header
files that describe the functionality of the various services
that the steering library can interact with:

src/soapC.c
src/soapClient.c
include/soapH.h
include/soapStub.h
include/soapRealityGrid.nsmap

See the src/gsoap_stubs/README file for more details.

----------------------------------------------------------------------------

Any comments, enquiries or pleas for explanation should be sent to:

Andrew Porter                Andrew.Porter@manchester.ac.uk
SVE Group
Manchester Computing
University of Manchester
