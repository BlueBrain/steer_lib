/*
  The RealityGrid Steering Library

  Copyright (c) 2002-2010, University of Manchester, United Kingdom.
  All rights reserved.

  This software is produced by Research Computing Services, University
  of Manchester as part of the RealityGrid project and associated
  follow on projects, funded by the EPSRC under grants GR/R67699/01,
  GR/R67699/02, GR/T27488/01, EP/C536452/1, EP/D500028/1,
  EP/F00561X/1.

  LICENCE TERMS

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:

    * Redistributions of source code must retain the above copyright
       notice, this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above
      copyright notice, this list of conditions and the following
      disclaimer in the documentation and/or other materials provided
      with the distribution.

    * Neither the name of The University of Manchester nor the names
      of its contributors may be used to endorse or promote products
      derived from this software without specific prior written
      permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
  COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  POSSIBILITY OF SUCH DAMAGE.

  Author: Robert Haines
 */

/** @internal
    @file ReG_Steer_Config.h
    @brief Configuration file for passing build time options to source code

    All internal library source code and header files should include
    ReG_Steer_Config.h before any other code or includes.
    @author Robert Haines
*/

#ifndef __REG_STEER_CONFIG_H__

/* ReG version */
#define REG_STEER_LIB_VERSION "@REG_STEER_LIB_VERSION@"

/* The default directory to use for scratch space */
#define REG_SCRATCH_DEFAULT "@REG_SCRATCH_DEFAULT@/"

/* debug message options */

#cmakedefine REG_DEBUG
#cmakedefine REG_DEBUG_FULL

/* library options */

#cmakedefine01 REG_DYNAMIC_MOD_LOADING
#cmakedefine01 REG_LOG_STEERING
#cmakedefine01 REG_VALIDATE_XML
#cmakedefine01 REG_KEEP_XML_MESSAGES
#cmakedefine01 REG_USE_TIMING

/* platform features to code for */

#cmakedefine01 REG_HAS_MSG_NOSIGNAL
#cmakedefine01 REG_HAS_MSG_DONTWAIT
#cmakedefine01 REG_HAS_MSG_WAITALL
#cmakedefine01 REG_HAS_CLOSESOCKET
#cmakedefine01 REG_HAS_GETPASS
#cmakedefine01 REG_HAS_SIGUSR2
#cmakedefine01 REG_HAS_SIGXCPU
#cmakedefine01 REG_HAS_XMLREADMEMORY

/* standard system headers */

#cmakedefine01 REG_NEED_OPENSSL_H
#cmakedefine01 REG_NEED_MALLOC_H
#cmakedefine01 REG_HAS_RPC_H
#cmakedefine01 REG_HAS_XDR_H

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <errno.h>
#include <time.h>

#ifndef _MSC_VER
#include <unistd.h>
#include <sys/time.h>
#include <sys/utsname.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netinet/tcp.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <dirent.h>
#if REG_DYNAMIC_MOD_LOADING
#include <dlfcn.h>
#endif /* REG_DYNAMIC_MOD_LOADING */
#else /* _MSC_VER */
#include <Winsock2.h>
#include <Ws2tcpip.h>
#include <Windows.h>
#include <direct.h>
#include <io.h>
#include <conio.h>
#include "ReG_Steer_Win32.h"
#include "dirent.h"
#endif /* _MSC_VER */

/* load the correct xdr header file */
#if REG_HAS_RPC_H
#include <rpc/rpc.h>
#endif
#if REG_HAS_XDR_H
#include <rpc/xdr.h>
#endif

/* only include malloc.h if we need it.
   some systems define malloc in stdlib.h */
#if REG_NEED_MALLOC_H
#include <malloc.h>
#endif

#if REG_NEED_OPENSSL_H
#include <openssl/sha.h>
#endif

#include <libxml/xmlmemory.h>
#include <libxml/parser.h>

#if REG_VALIDATE_XML
#include <libxml/xmlschemas.h>
#endif

#if !REG_HAS_CLOSESOCKET
#define closesocket close
#endif

#define __REG_STEER_CONFIG_H__
#endif /* __REG_STEER_CONFIG_H__ */
